"""
Image generation utility for summary statistics
"""
from PIL import Image, ImageDraw, ImageFont
from pathlib import Path
from datetime import datetime
from sqlalchemy.orm import Session
from app.models.country import Country
from app.core.config import settings


def generate_summary_image(db: Session, timestamp: datetime):
    """
    Generate a summary image with country statistics
    
    Args:
        db: Database session
        timestamp: Timestamp of the refresh
    """
    # Create cache directory if it doesn't exist
    cache_dir = Path(settings.CACHE_DIR)
    if not cache_dir.is_absolute():
        cache_dir = Path.cwd() / cache_dir
    cache_dir.mkdir(parents=True, exist_ok=True)

    # Get total countries
    total_countries = db.query(Country).count()

    # Get top 5 countries by estimated GDP
    top_countries = db.query(Country).filter(
        Country.estimated_gdp.isnot(None)
    ).order_by(
        Country.estimated_gdp.desc()
    ).limit(5).all()

    # Create image
    width, height = 800, 600
    image = Image.new('RGB', (width, height), color='#1a1a2e')
    draw = ImageDraw.Draw(image)

    # Try to use a nice font, fallback to default
    try:
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 32)
        header_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 24)
        text_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 18)
        small_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 14)
    except:
        # Fallback to default font
        title_font = ImageFont.load_default()
        header_font = ImageFont.load_default()
        text_font = ImageFont.load_default()
        small_font = ImageFont.load_default()

    # Draw title
    title = "Country Data Summary"
    draw.text((400, 40), title, fill='#00d4ff', font=title_font, anchor="mm")

    # Draw total countries
    y_position = 100
    total_text = f"Total Countries: {total_countries}"
    draw.text((50, y_position), total_text, fill='#ffffff', font=header_font)

    # Draw timestamp
    y_position += 50
    time_text = f"Last Refreshed: {timestamp.strftime('%Y-%m-%d %H:%M:%S')} UTC"
    draw.text((50, y_position), time_text, fill='#aaaaaa', font=small_font)

    # Draw top 5 countries
    y_position += 60
    draw.text((50, y_position), "Top 5 Countries by Estimated GDP:", fill='#00ff88', font=header_font)

    y_position += 50
    for i, country in enumerate(top_countries, 1):
        gdp_formatted = f"${country.estimated_gdp:,.2f}" if country.estimated_gdp else "N/A"
        country_text = f"{i}. {country.name}: {gdp_formatted}"
        draw.text((70, y_position), country_text, fill='#ffffff', font=text_font)
        y_position += 40

    # Draw footer
    footer_text = "Generated by Country Currency & Exchange API"
    draw.text((400, 560), footer_text, fill='#666666', font=small_font, anchor="mm")

    # Save image
    image_path = cache_dir / settings.IMAGE_FILENAME
    try:
        image.save(image_path)
        print(f"Summary image generated: {image_path}")
    except Exception as e:
        print(f"Warning: Failed to save summary image: {e}")